//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventarioProductosWebApi.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MiniMarketDbEntities : DbContext
    {
        public MiniMarketDbEntities()
            : base("name=MiniMarketDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Categorias> Categorias { get; set; }
        public virtual DbSet<Productos> Productos { get; set; }
        public virtual DbSet<Proveedores> Proveedores { get; set; }
    
        public virtual ObjectResult<spObtenerCategorias_Result> spObtenerCategorias()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerCategorias_Result>("spObtenerCategorias");
        }
    
        public virtual ObjectResult<spObtenerCategoriasPorId_Result> spObtenerCategoriasPorId(Nullable<int> idCategoria)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerCategoriasPorId_Result>("spObtenerCategoriasPorId", idCategoriaParameter);
        }
    
        public virtual ObjectResult<spObtenerProveedores_Result> spObtenerProveedores()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerProveedores_Result>("spObtenerProveedores");
        }
    
        public virtual ObjectResult<spObtenerProveedoresPorId_Result> spObtenerProveedoresPorId(Nullable<int> idProveedor)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerProveedoresPorId_Result>("spObtenerProveedoresPorId", idProveedorParameter);
        }
    
        public virtual ObjectResult<spObtenerProductoPorId_Result> spObtenerProductoPorId(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerProductoPorId_Result>("spObtenerProductoPorId", idProductoParameter);
        }
    
        public virtual ObjectResult<spObtenerProductos_Result> spObtenerProductos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerProductos_Result>("spObtenerProductos");
        }
    }
}
